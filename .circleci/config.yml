version: 2.1

orbs:
  golang: heroku/golang@0.3.0
  go: circleci/go@0.2.0

jobs:
  run-tests:
    docker:
      - image: golang:1.13.4
      - image: postgres:11.1
        name: test-db
    environment:
      - TEST_DATABASE_URL: postgresql://postgres:postgres@test-db:5432/postgres?sslmode=disable
    working_directory: /app
    steps:
      - checkout
      - go/load-cache:
        key: go-mod-v1
      # TODO: use dockerize orb when this PR gets merged: https://github.com/ganta/dockerize-orb/pull/8
      - run:
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      # Wait for postgres to accept a connection before running tests
      - run: dockerize -wait tcp://test-db:5432 -timeout 30s
      - go/test
      - go/save-cache:
        key: go-mod-v1
  build-image:
    machine: true
    steps:
      - checkout
      - run: echo "$DOCKER_ACCESS_TOKEN" | docker login --username $DOCKER_USER --password-stdin
      - run: >
          docker build
          --tag tweetium/tweeter-backend:$CIRCLE_SHA1
          --build-arg git_commit_sha=$CIRCLE_SHA1 .
      - run: docker tag tweetium/tweeter-backend:$CIRCLE_SHA1 tweetium/tweeter-backend:latest
      - run: docker push tweetium/tweeter-backend:$CIRCLE_SHA1
      - run: docker push tweetium/tweeter-backend:latest

workflows:
  version: 2
  build:
    jobs:
      - golang/golangci-lint
      - run-tests
      - build-image:
          requires:
            - run-tests
            - golang/golangci-lint
          filters:
            branches:
              only:
                - master
